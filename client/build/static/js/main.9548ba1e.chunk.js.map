{"version":3,"sources":["contexts/SearchResultsContext.js","components/SearchForm.js","contexts/FavoritesContext.js","components/ItemSummary.js","components/ResultType.js","components/ResultList.js","components/FavList.js","App.js","serviceWorker.js","index.js"],"names":["SearchResultsContext","createContext","SearchResultsContextProvider","props","_useState","useState","_useState2","Object","slicedToArray","item","setItem","_useState3","_useState4","search","setSearch","useEffect","getData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","axios","get","params","sent","data","stop","apply","this","arguments","length","react_default","createElement","Provider","value","handleSearch","str","children","SearchForm","useContext","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","className","FavoritesContext","FavoritesContextProvider","favorites","setFavorites","window","localStorage","JSON","parse","getItem","addFavorite","favObj","stringify","concat","toConsumableArray","removeFavorite","id","removedFav","filter","favorite","trackId","ItemSummary","_useContext","isFavorite","forEach","btn","onClick","href","trackViewUrl","src","artworkUrl100","alt","artistName","trackName","primaryGenreName","ResultTypeContainer","name","list","array","map","i","key","ResultList","keys","FavList","App","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9548ba1e.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const SearchResultsContext = createContext();\nexport default function SearchResultsContextProvider(props) {\n const [item, setItem] = useState({});\n const [search, setSearch] = useState('');\n\n const handleSearch = str => {\n  setSearch(str);\n };\n\n //Trigger api call when search value is updated\n useEffect(() => {\n  const getData = async () => {\n   const result = await axios.get('http://localhost:3001/search', {\n    params: {\n     search: search\n    }\n   });\n   setItem(result.data);\n  };\n  if (search.length > 0) {\n   getData();\n  }\n }, [search]);\n\n return (\n  <SearchResultsContext.Provider value={{ item, handleSearch }}>\n   {props.children}\n  </SearchResultsContext.Provider>\n );\n}\n","import React, { useContext, useState } from 'react';\nimport { SearchResultsContext } from '../contexts/SearchResultsContext';\n\nexport default function SearchForm() {\n const { handleSearch } = useContext(SearchResultsContext);\n const [search, setSearch] = useState('');\n const handleSubmit = e => {\n  e.preventDefault();\n  handleSearch(search);\n };\n return (\n  <div>\n   <form onSubmit={handleSubmit}>\n    <input\n     type=\"text\"\n     placeholder=\"Enter Search...\"\n     value={search}\n     onChange={e => {\n      setSearch(e.target.value);\n     }}\n     required\n    />\n    <button type=\"submit\">\n     <i className=\"fa fa-search\" />\n    </button>\n   </form>\n  </div>\n );\n}\n","import React, { createContext, useState, useEffect } from 'react';\n\nexport const FavoritesContext = createContext();\nexport default function FavoritesContextProvider(props) {\n const [favorites, setFavorites] = useState([]);\n\n useEffect(() => {\n  if (window.localStorage.favorites) {\n   setFavorites(JSON.parse(window.localStorage.getItem('favorites')));\n  }\n }, []);\n\n //ADD A NEW FAVORITE - Create the favorites property in Local Storage if it doesn't exist\n // stringify the value favorites when setting it local storage and parse when pulling it out of local storage.\n const addFavorite = item => {\n  if (!window.localStorage.favorites) {\n   window.localStorage.setItem('favorites', JSON.stringify([item]));\n  } else {\n   const favObj = JSON.parse(window.localStorage.getItem('favorites'));\n   window.localStorage.setItem('favorites', JSON.stringify([...favObj, item]));\n  }\n  setFavorites([...favorites, item]);\n };\n //REMOVE FAVORITE - Filter the existing favorites to remove the selected item and store in local storage as a JSON string\n const removeFavorite = id => {\n  const removedFav = favorites.filter(favorite => favorite.trackId !== id);\n  setFavorites(removedFav);\n  window.localStorage.setItem('favorites', JSON.stringify(removedFav));\n };\n\n return (\n  <FavoritesContext.Provider value={{ favorites, addFavorite, removeFavorite }}>\n   {props.children}\n  </FavoritesContext.Provider>\n );\n}\n","import React, { useContext } from 'react';\nimport { FavoritesContext } from '../contexts/FavoritesContext';\n\nexport default function ItemSummary(props) {\n const { item } = props;\n const { favorites, addFavorite, removeFavorite } = useContext(\n  FavoritesContext\n );\n\n //check against list of favorites to see if item is already a favorite and handle which button to display Add or Remove\n let isFavorite = false;\n favorites.forEach(favorite => {\n  if (favorite.trackId === item.trackId) {\n   isFavorite = true;\n  }\n });\n const btn = isFavorite ? (\n  <button onClick={() => removeFavorite(item.trackId)}>\n   Remove from Favorites\n  </button>\n ) : (\n  <button\n   onClick={() => {\n    addFavorite(item);\n   }}\n  >\n   Add to Favorites\n  </button>\n );\n ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n return (\n  <li className=\"list-item\">\n   <a href={item.trackViewUrl} target=\"_blank\">\n    <img src={item.artworkUrl100} alt={item.artistName} />\n   </a>\n   <p>\n    <b>{item.trackName}</b> <br />\n    Genre: {item.primaryGenreName}\n    <br />\n    <a href={item.trackViewUrl} target=\"_blank\">\n     View on iTunes\n    </a>\n   </p>\n   {btn}\n  </li>\n );\n}\n","import React from 'react';\nimport ItemSummary from './ItemSummary';\n\nexport default function ResultTypeContainer(props) {\n let { name, array } = props;\n name = name === 'undefined' ? 'other' : name;\n const list = array.map((item, i) => {\n  return <ItemSummary item={item} key={i + '-' + item.trackId} />;\n });\n return (\n  <div>\n   <h1>{name}s:</h1>\n   <ul className=\"result-container\">{list}</ul>\n  </div>\n );\n}\n","import React, { useContext } from 'react';\nimport { SearchResultsContext } from '../contexts/SearchResultsContext';\nimport ResultTypeContainer from './ResultType';\n\nexport default function ResultList() {\n const { item } = useContext(SearchResultsContext);\n const resultTypes = Object.keys(item);\n return resultTypes.map(type => {\n  return (\n   <ResultTypeContainer key={'result-' + type} name={type} array={item[type]} />\n  );\n });\n}\n","import React, { useContext } from 'react';\nimport { FavoritesContext } from '../contexts/FavoritesContext';\nimport ItemSummary from './ItemSummary';\n\nexport default function FavList() {\n const { favorites } = useContext(FavoritesContext);\n const list = favorites.map((item, i) => {\n  return <ItemSummary item={item} key={'fav-' + i} />;\n });\n if (list.length < 1) {\n  return <div />;\n }\n return (\n  <div>\n   <h1>Favorites:</h1>\n   <ul className=\"result-container\">{list}</ul>\n  </div>\n );\n}\n","import React from 'react';\nimport SearchResultsContextProvider from './contexts/SearchResultsContext';\nimport SearchForm from './components/SearchForm';\nimport ResultList from './components/ResultList';\nimport FavoritesContextProvider from './contexts/FavoritesContext';\nimport FavList from './components/FavList';\n\nfunction App() {\n return (\n  <div className=\"App\">\n   <FavoritesContextProvider>\n    <SearchResultsContextProvider>\n     <SearchForm />\n     <FavList />\n     <ResultList />\n    </SearchResultsContextProvider>\n   </FavoritesContextProvider>\n  </div>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}